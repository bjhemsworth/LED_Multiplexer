int SER = 4;
int CLK = 2;
int LAT = 3;

const int n_scanlines = 8;
const int n_frames = 64;

union int_arr{
  uint32_t as_int;
  uint8_t as_array[4];
  
};

PROGMEM const union int_arr data[n_frames][n_scanlines] = {{0xfffffffe,0xfffffffd,0xfffffffb,0xffd9fff7,0xff9dffef,0xffb5ffdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xffcdfff7,0xffdfffef,0xff96bfdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xffeffff7,0xffcebfef,0xffd2ffdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xfffebff7,0xffeeffef,0xffca7fdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xfffebffb,0xfffefff7,0xfffe7fef,0xffe97fdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xfff4fffb,0xfffe7ff7,0xffff7fef,0xfffd3fdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xffa67ffb,0xffff7ff7,0xffff3fef,0xffffbfdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xfd337ffb,0xffff3ff7,0xffffbfef,0xffffffdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xfd9b3ffb,0xfd7fbff7,0xffffffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xfcd9bffb,0xfdfffff7,0xfd7fffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xfecdfffb,0xfcfffff7,0xfdffffef,0xfd7fffdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xfe6ffffb,0xfefffff7,0xfcffffef,0xfdffffdf,0xfd7fffbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xff7ffffb,0xfe7ffff7,0xfeffffef,0xfcffffdf,0xfdafffbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xff7ffff7,0xfe7fffef,0xfeffffdf,0xfcb5ffbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xfffffff7,0xff7fffef,0xfe7fffdf,0xfe96bfbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xfffffff7,0xffffffef,0xff7fffdf,0xfe52d7bf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xfffffff7,0xffffffef,0xffffd7df,0xff4a5fbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xfffffff7,0xffffd7ef,0xffffdfdf,0xffe94fbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xffffd7f7,0xffffdfef,0xffffcfdf,0xfffd2fbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xffffd7fb,0xffffdff7,0xffffcfef,0xffffefdf,0xffffa7bf,0xffffff7f},
{0xfffffffe,0xffffd7fd,0xffffdffb,0xffffcff7,0xffffefef,0xffffe7df,0xfffff7bf,0xffffff7f},
{0xfffffffe,0xfffe9ffd,0xffffcffb,0xffffeff7,0xffffe7ef,0xfffff7df,0xffffffbf,0xffffff7f},
{0xfffffffe,0xfff4cffd,0xffffeffb,0xffffe7f7,0xfffff7ef,0xffffffdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xffa66ffd,0xffffe7fb,0xfffff7f7,0xffffffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xfd3367fd,0xfffff7fb,0xfffffff7,0xffffffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xe99b37fd,0xfffffffb,0xfffffff7,0xffffffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xecd9bffd,0xebfffffb,0xfffffff7,0xffffffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xe6cdfffd,0xeffffffb,0xebfffff7,0xffffffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xf66ffffd,0xe7fffffb,0xeffffff7,0xebffffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xf37ffffd,0xf7fffffb,0xe7fffff7,0xefffffef,0xebffffdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xfbfffffd,0xf3fffffb,0xf7fffff7,0xe7ffffef,0xefffffdf,0xebffffbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xfbfffffb,0xf3fffff7,0xf7ffffef,0xe7ffffdf,0xefffffbf,0xebffff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xfbfffff7,0xf3ffffef,0xf7ffffdf,0xe7ffffbf,0xed7fff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xfffffff7,0xfbffffef,0xf3ffffdf,0xf7ffffbf,0xe5afff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xfffffff7,0xffffffef,0xfbffffdf,0xf3ffffbf,0xf4b5ff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xfffffff7,0xffffffef,0xffffffdf,0xfbffffbf,0xf296bf7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xfffffff7,0xffffffef,0xffffffdf,0xffffffbf,0xfa52d77f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xfffffff7,0xffffffef,0xffffffdf,0xffffffbf,0xff4a5a7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xfffffff7,0xffffffef,0xffffffdf,0xfffffabf,0xffe94b7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xfffffff7,0xffffffef,0xfffffadf,0xfffffbbf,0xffe9497f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xfffffff7,0xfffffaef,0xfffffbdf,0xfffff9bf,0xffffa57f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xfffffaf7,0xfffffbef,0xfffff9df,0xfffffdbf,0xfffff47f},
{0xfffffffe,0xfffffffd,0xfffffafb,0xfffffbf7,0xfffff9ef,0xfffffddf,0xfffffcbf,0xfffffe7f},
{0xfffffffe,0xfffffafd,0xfffffbfb,0xfffff9f7,0xfffffdef,0xfffffcdf,0xfffffebf,0xffffff7f},
{0xfffffafe,0xfffffbfd,0xfffff9fb,0xfffffdf7,0xfffffcef,0xfffffedf,0xffffffbf,0xffffff7f},
{0xffffd3fe,0xfffff9fd,0xfffffdfb,0xfffffcf7,0xfffffeef,0xffffffdf,0xffffffbf,0xffffff7f},
{0xfffe99fe,0xfffffdfd,0xfffffcfb,0xfffffef7,0xffffffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0xfff4cdfe,0xfffffcfd,0xfffffefb,0xfffffff7,0xffffffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0xffa66cfe,0xfffffefd,0xfffffffb,0xfffffff7,0xffffffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0xfd3366fe,0xfffffffd,0xfffffffb,0xfffffff7,0xffffffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0xe99b37fe,0xfffffffd,0xfffffffb,0xfffffff7,0xffffffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0x4cd9bffe,0xfffffffd,0xfffffffb,0xfffffff7,0xffffffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0x66cdfffe,0x5ffffffd,0xfffffffb,0xfffffff7,0xffffffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0x366ffffe,0x7ffffffd,0x5ffffffb,0xfffffff7,0xffffffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0xb37ffffe,0x3ffffffd,0x7ffffffb,0x5ffffff7,0xffffffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0x9bfffffe,0xbffffffd,0x3ffffffb,0x7ffffff7,0x5fffffef,0xffffffdf,0xffffffbf,0xffffff7f},
{0xdffffffe,0x9ffffffd,0xbffffffb,0x3ffffff7,0x7fffffef,0x5fffffdf,0xffffffbf,0xffffff7f},
{0xfffffffe,0xdffffffd,0x9ffffffb,0xbffffff7,0x3fffffef,0x7fffffdf,0x5fffffbf,0xffffff7f},
{0xfffffffe,0xfffffffd,0xdffffffb,0x9ffffff7,0xbfffffef,0x3fffffdf,0x7fffffbf,0x5fffff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xdffffff7,0x9ff5ffef,0xbfffffdf,0x3fffffbf,0x7fffff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xfff5fff7,0xdff7ffef,0x9fffffdf,0xbfffffbf,0x3fffff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xffa7fff7,0xfff3ffef,0xdfffffdf,0x9fffffbf,0xbfffff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xffb3fff7,0xffabffef,0xffffffdf,0xdfffffbf,0x9fffff7f},
{0xfffffffe,0xfffffffd,0xfffffffb,0xff9bfff7,0xffb9ffef,0xffafffdf,0xffffffbf,0xdfffff7f}};

void setup()
{
    // put your setup code here, to run once:
    pinMode(SER, OUTPUT);
    pinMode(LAT, OUTPUT);
    pinMode(CLK, OUTPUT);
    Serial.begin(9600);
}

int t = 0;
void loop()
{
    union int_arr test;
    test.as_int = 0xFF20304;

   // Serial.println(data[0][0].as_array[1], BIN);

    //t = millis();
    // put your main code here, to run repeatedly:
    for (int frame = 0; frame < n_frames; frame++)
    {
        for (int m = 0; m<32; m++)
        {
            for (int scan = 0; scan < n_scanlines; scan++)
            {
              digitalWrite(LAT, LOW);
              shiftOut(SER, CLK, (byte) pgm_read_byte(&(data[frame][scan].as_array[3])));
              shiftOut(SER, CLK, (byte) pgm_read_byte(&(data[frame][scan].as_array[2])));
              shiftOut(SER, CLK, (byte) pgm_read_byte(&(data[frame][scan].as_array[1])));
              shiftOut(SER, CLK, (byte) pgm_read_byte(&(data[frame][scan].as_array[0])));
              digitalWrite(LAT, HIGH);
            }           
        } 
    }
    //Serial.println(millis()-t);
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t val)
{
    uint8_t mask = 0x80;
    for (uint8_t i = 0; i < 8; i++)
    {   
        digitalWrite(dataPin, !!(val & mask));
        digitalWrite(clockPin, HIGH);
        digitalWrite(clockPin, LOW);
        mask = mask >> 1;        
    }
}
